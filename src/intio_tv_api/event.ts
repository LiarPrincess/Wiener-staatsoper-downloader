import { Cache } from '../cache';

const cache = new Cache('event');

// This was generated by 'http://www.json2ts.com', but we do not need all of those fields.
// So we will comment some of them.
export interface Event {
  readonly id: string;
  readonly _self: string;
  readonly title: string;
  readonly title_ext: string;
  // readonly short_description: string;
  // readonly long_description: string;
  readonly begin_time: string;
  readonly end_time: string;
  // readonly preliminary_times: boolean;
  // readonly vod_availability: string;
  readonly tags: Tag[];
  // readonly cast: Cast[];
  readonly cover_image: CoverImage;
  // readonly gallery: any[];
  readonly streams: string;
  // readonly tickets: string;
  // readonly created: Date;
  // readonly updated: Date;
}

interface Tag {
  readonly name: string;
  readonly slug: string;
}

// interface Person {
//   readonly id: string;
//   readonly name: string;
//   readonly biography: string;
//   readonly image?: any;
//   readonly created: Date;
//   readonly updated: Date;
// }

// interface Type {
//   readonly slug: string;
//   readonly name: string;
// }

// interface Role {
//   readonly id: string;
//   readonly name: string;
//   readonly type: Type;
//   readonly created: Date;
//   readonly updated: Date;
// }

// interface Cast {
//   readonly id: string;
//   readonly person: Person;
//   readonly role: Role;
//   readonly created: Date;
//   readonly updated: Date;
// }

// interface Renditions {
//   960x540: string;
//   50w: string;
//   400x400: string;
//   400w: string;
//   preview: string;
//   thumbnail: string;
//   square: string;
//   16: 9: string;
//   4: 3 ?: any;
// }

interface CoverImage {
  readonly id: string;
  readonly title: string;
  readonly url: string;
  // readonly renditions: Renditions;
  // readonly width: number;
  // readonly height: number;
  // readonly description: string;
  // readonly credit: string;
  // readonly created: Date;
  // readonly updated: Date;
}

export async function getEvent(url: string): Promise<Event> {
  const id = extractId(url);

  const eventUrl = `https://live.performa.intio.tv/api/v1/events/${id}/?platform=web&lang=en`;
  const event = await cache.downloadJSON(eventUrl) as Event;
  return event;
}

function extractId(url: string): string {
  // input: https://staatsoperlive.com/event/0/4bb291e3-b704-4cea-85b9-f14489557176/watch
  // output: 4bb291e3-b704-4cea-85b9-f14489557176

  const idRegex = /event\/\d\/(.*)\/watch/;
  const resultArray = idRegex.exec(url);

  if (!resultArray || resultArray.length != 2) {
    throw new Error(`Unable to extract event id from ${url}`);
  }

  // resultArray[0] - The full string of characters matched
  // resultArray[1] - The parenthesized substring matches
  return resultArray[1];
}
